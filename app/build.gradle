plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    // Room을 사용하기 위해서 [코드 10-21]처럼 의존성을 추가합니다.
    // Room은 어노체이션 프로세서에서 코드를 생성하기 때문에 plugins 블록에 kotlin-kapt 플러그인도 추가합니다.
    // 어노테이션 프로세서는 컴파일을 할 때 어노테이션에 따라 코드를 검사하거나 새로운 코드를 작성하는 등의 작업을 할 수 있는 도구입니다.
    id 'kotlin-kapt'
}

android {
    namespace 'kr.co.bullets.dailyq'
    compileSdk 33

    defaultConfig {
        applicationId "kr.co.bullets.dailyq"
        minSdk 29
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildFeatures {
        viewBinding true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.6.0'
    implementation 'com.google.android.material:material:1.7.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.paging:paging-runtime-ktx:3.1.1'
    // 서버의 데이터를 로컬 데이터베이스에 저장해 캐시로 사용할 땐 갱신되는 시점이 있어야 합니다.
    // HTTP 캐시에서는 ETag가 변경되거나 max-age가 지나서 만료되는 경우에 갱신을 했습니다.
    // 그러나 앞에서 만든 타임라인은 질문을 데이터베이스에 저장하면 더 이상 서버에서 받아오지 않기 때문에 답의 개수처럼 변경되어야 하는 정보나
    // 특벼한 이유로 질문이 변경된 경우에도 갱신이 되지 않는 문제가 있습니다.
    // Daily Q에서는 두 가지 방법으로 테이터를 갱신할 수 있습니다.
    // 첫 번째는 타임라인 화면을 당겨서 전체 목록을 새로고침하는 방법입니다.
    // Pull-to-refresh라고 하며 안드로이드에서는 SwipeRefreshLayout 라이브러리를 사용해 만듭니다.
    // build.gradle에 의존성을 추가합니다.
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'androidx.viewpager2:viewpager2:1.0.0'

    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.10.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1'
//    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.5.1"
    implementation 'io.coil-kt:coil:2.2.2'
    implementation 'com.github.chrisbanes:PhotoView:2.3.0'

    // Room은 RoomDatabase를 관리하는 Database, Entity, DAO로 구성됩니다.
    // DAO에서 Entity를 사용하고 Database는 DAO와 Entity를 모두 사용하기 때문에 Entity, DAO, Database의 순서로 만들겠습니다.
    implementation 'androidx.room:room-runtime:2.5.0'
    implementation 'androidx.room:room-ktx:2.5.0'
    implementation 'androidx.room:room-paging:2.5.0'
    kapt 'androidx.room:room-compiler:2.5.0'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}